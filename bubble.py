import os
import click
import pkg_resources
import re

#Maybe start over. Should be VERY simple

# VERY SIMPLE

resource_package = __name__

#be careful of overwriting files
# use some regular expressions
#add way to sepcify proj dir from .env file in template

@click.command()
@click.option('-f', '--file', help='File path.')
@click.option('-t', '--template', help='Type of template.')
@click.option('-m', '--make_target', help='Generate a Makefile target.', is_flag=True)
# @click.option('-f', '--file', help='File to be parsed.')
def cli(file=None, template=None, make_target=None):
    """Entry point for the bubble cli."""

    # User must specify a template
    if template is None and make_target is None:

        raise ValueError('Please specify an action: -t template, -m makefile target.')

    elif file is not None and template is not None:

        scaffold(file, template)

    elif file is not None and make_target is not None:

        create_make_target(file)

    else:

        raise ValueError('Unknown input.')



def scaffold(file, template):
    '''Function to scaffold a file from a template'''

    if template not in ['csv', 'png', 'module']:

        raise ValueError('Unknown template. Please specify csv, png, or module.')

    templates = {'R': {'csv': 'templates/csv.R',
                       'png': 'templates/png.R',
                       'module': 'templates/module.R'},
                'PYTHON': {'csv': 'templates/csv.py',
                           'png': 'templates/png.py',
                           'module': 'templates/module.py'}

                }

    template_path = templates[language(file)][template]

    template = pkg_resources.resource_string(resource_package,
                                             template_path)

    if os.path.exists(file):

        overwrite = input('Found an existing file at %s. \nDo you want to overwrite this file? (Y/n)' % file)

        if overwrite != 'Y':

            print('Stopping.')
            exit()

    try:

        with open(file, 'wb') as f:

            f.write(b'# -- Generated by bubble with <3. --\n\n' + template)

        print('Successfully created %s.' % file)

    except:

        raise Exception('Unable to write new file %s/' % file)


def language(file):
    '''Get language from a file extension'''

    extension = file.split('.')[-1]

    if extension in ['r', 'R']:

        return('R')

    elif extension in ['py']:

        return('PYTHON')

    else:

        raise ValueError('Unknown file extension .%' % extension)

def create_make_target(file):
    '''
    Function to parse a template file and create a makefile target

    Add option to update an existing target
    '''

    if not os.path.exists(file):

        raise FileNotFoundError('File not found. Please provide a path from your project directory.')

    if not os.path.exists('Makefile'):

        raise FileNotFoundError('No Makefile found in current directory.')

    with open('Makefile') as m:

        makefile_lines = m.readlines()

    ''' Check for any existing targets with the same name'''
    existing_targets = flatten([re.compile('(.+?):').findall(x) for x in makefile_lines])

    target_name = file.split('.')[0].split('/')[-1]

    if target_name in existing_targets:

        response = input('Found an existing target %s. Do you want to update it? (Y/n)' % target_name)

        if response != 'Y':

            print('Stopping.')
            exit()

        else:

            existing_index = [re.compile(target_name + ':').findall(x) for x in makefile_lines]
            existing_index = [i for i, x in enumerate(existing_index) if x == [target_name + ':']][0]

            interpreter_index = [i for i, x in enumerate(makefile_lines) if '$(%s_INTERPRETER) $^ $@'  % language(file) in x]

            interpreter_index = [x for x in interpreter_index if x > existing_index][0]

            del makefile_lines[existing_index - 2:interpreter_index + 1]

    with open(file) as m:

        file_lines = m.readlines()

    if language(file) == 'R':

        capture_start = file_lines.index('if(interactive()){\n')

        capture_stop = file_lines.index('}\n')

        args = file_lines[capture_start + 1: capture_stop - 2]

        #From here on can probably made applicable to both languages
        in_quotes = re.compile('\'(.+?)\'')

        target = args[-1]

        target = in_quotes.findall(target)[0]

        depends = args[:-1]

        depends = ['${PWD}/' + in_quotes.findall(x)[0] for x in depends]

        depends = ' \n '.join(depends)

        short_target = target_name + ': ${PWD}/' + target + '\n\n'

        target = '${PWD}/' + target + ': ${PWD}/' + file + ' \\ ' + '\n' + '\t' + depends + '\n\t$(R_INTERPRETER) $^ $@'

    makefile_content = ''.join(makefile_lines) + '\n\n' + short_target + target

    with open('Makefile', 'w') as m:

        m.write(makefile_content)

    print('Successfully updated Makefile.')


def flatten(list):

    return [item for sublist in list for item in sublist]



if __name__ == '__main__':

    print(resource_package)

    cli()
